#region Namespaces
using System;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using Microsoft.SqlServer.Dts.Runtime;
using Microsoft.VisualBasic.FileIO;
#endregion

        public void Main()
        {
            string connString = "Server=DESKTOP-OL43US5;Database=Portfolio Projects;Integrated Security=True;";
            string filePath = Dts.Variables["User::CSVFilePath"].Value.ToString();
            string fileName = Path.GetFileNameWithoutExtension(filePath);
            string tableName = fileName.Replace(" ", "_").Replace("-", "_");
            string[] columns;

            try
            {
                using (TextFieldParser parser = new TextFieldParser(filePath))
                {
                    parser.TextFieldType = FieldType.Delimited;
                    parser.SetDelimiters(",");
                    columns = parser.ReadFields();
                    columns = columns.Where(col => !string.IsNullOrWhiteSpace(col)).ToArray();
                }

                bool fireAgain = true;
                string columnNames = string.Join(", ", columns);
                Dts.Events.FireInformation(0, "Script Task", $"Processing file: {filePath}", string.Empty, 0, ref fireAgain);
                Dts.Events.FireInformation(0, "Script Task", $"Columns: {columnNames}", string.Empty, 0, ref fireAgain);

                string dropTableSQL = $"IF OBJECT_ID('[{tableName}]', 'U') IS NOT NULL DROP TABLE [{tableName}];";
                string createTableSQL = $"CREATE TABLE [{tableName}] (";
                foreach (string column in columns)
                {
                    createTableSQL += $"[{column}] NVARCHAR(MAX),";
                }
                createTableSQL = createTableSQL.TrimEnd(',') + ");";

                Dts.Events.FireInformation(0, "Script Task", $"DROP TABLE SQL: {dropTableSQL}", string.Empty, 0, ref fireAgain);
                Dts.Events.FireInformation(0, "Script Task", $"CREATE TABLE SQL: {createTableSQL}", string.Empty, 0, ref fireAgain);

                using (SqlConnection conn = new SqlConnection(connString))
                {
                    conn.Open();
                    using (SqlCommand cmd = new SqlCommand(dropTableSQL + createTableSQL, conn))
                    {
                        cmd.ExecuteNonQuery();
                    }

                    using (DataTable dataTable = new DataTable())
                    {
                        foreach (string column in columns)
                        {
                            dataTable.Columns.Add(new DataColumn(column, typeof(string)));
                        }

                        using (TextFieldParser parser = new TextFieldParser(filePath))
                        {
                            parser.TextFieldType = FieldType.Delimited;
                            parser.SetDelimiters(",");
                            parser.ReadLine(); // Skip header

                            while (!parser.EndOfData)
                            {
                                string[] fields = parser.ReadFields();
                                fields = fields.Take(columns.Length).ToArray();

                                if (fields.Length == columns.Length)
                                {
                                    DataRow row = dataTable.NewRow();
                                    row.ItemArray = fields;
                                    dataTable.Rows.Add(row);

                                    if (dataTable.Rows.Count >= 500) // Adjust batch size here
                                    {
                                        InsertBatch(conn, dataTable, tableName);
                                        dataTable.Clear();
                                    }
                                }
                                else
                                {
                                    Dts.Events.FireWarning(0, "Script Task", $"Skipping row due to column mismatch. File: {filePath}, Row: {string.Join(",", fields)}", string.Empty, 0);
                                }
                            }

                            if (dataTable.Rows.Count > 0)
                            {
                                InsertBatch(conn, dataTable, tableName);
                            }
                        }
                    }
                }

                Dts.Variables["User::TableName"].Value = tableName;
                Dts.TaskResult = (int)ScriptResults.Success;
            }
            catch (Exception ex)
            {
                Dts.Events.FireError(0, "Script Task", $"Error processing file: {filePath}. Error: {ex.Message}", string.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }

        private void InsertBatch(SqlConnection conn, DataTable dataTable, string tableName)
        {
            using (SqlTransaction transaction = conn.BeginTransaction())
            {
                try
                {
                    using (SqlBulkCopy bulkCopy = new SqlBulkCopy(conn, SqlBulkCopyOptions.Default, transaction))
                    {
                        bulkCopy.DestinationTableName = tableName;
                        bulkCopy.WriteToServer(dataTable);
                    }
                    transaction.Commit();
                }
                catch (Exception ex)
                {
                    transaction.Rollback();
                    Dts.Events.FireError(0, "Script Task", $"Error during bulk copy: {ex.Message}", string.Empty, 0);
                }
            }
        }

        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        }
    }
}
